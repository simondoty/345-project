options {
  STATIC = false;
}

PARSER_BEGIN(Parser)

package crono;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

// PROTIP: we can't statically import NIL because javacc gives it special
// meaning in Parser
import crono.AbstractSyntax.*;
import crono.Cons;
import crono.CronoOptions;
import crono.Nil;

public class Parser {}

PARSER_END(Parser)

SKIP:
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <"%" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN:
{
    < NIL : ["N","n"] ["I","i"] ["L","l"] >
}

TOKEN:
{
    < LPAR : "(" >
  | < RPAR : ")" >
  | < STRING : "\"" (["a"-"z", "A"-"Z"," ",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]","(",")", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?","'","%"])* "\"">
  | < DOUBLE : (["0"-"9"])+"."(["0"-"9"])+ | "-" (["0"-"9"])+"."(["0"-"9"])+ >
  | < INTEGER : (["0"-"9"])+ | "-" (["0"-"9"])+ >
  | < COMBSYMBOL : "<" ["S","K","B","C","Y","s","k","b","c","y"] ">" >  
  | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                "*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
                ";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?", "'", "\""])* >
}

TOKEN:
{
  < ERROR : ~[] >
}

Atom atom():
{ Token n; }
{
    <NIL>         { return Nil.NIL; }
  | n = <DOUBLE> { return new CronoDouble(n.image);}
  | n = <STRING> { return new CronoString(n.image);}
  | n = <INTEGER> { return new CronoNumber(Long.valueOf(n.image)); }
  | n = <SYMBOL>      { return Symbol.valueOf(n.image); }
}

Atom combinator():
{ Token n; }
{
    n = <COMBSYMBOL>	{ return new CombSymbol(n.image); }
}

Cons list():
{
  Atom a;
  Cons c;
  List<CronoType> l = new ArrayList<CronoType>();
}
{
  <LPAR>
  (
      c = list() {
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw LIST: %s\n",c);
        }
        l.add(c);
      }
    | a = combinator() {
	l.add(a);
	}
    | a = atom() {
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw ATOM: %s [ %s ]\n", a,
            a.getClass().getName());
        }
        l.add(a);
      }
  )*
  <RPAR>
  {
    if (l.size() == 0) {
      return Nil.NIL;
    } else {
      l.add(Nil.NIL);
      return new Cons(l);
    }
  }
}

CronoType prog(Environment env):
{
  List<CronoType> l;
  LambdaFunction lf;
  CombinatorFunction cf;
  Cons c;
  Atom a;
  CronoType lastResult = null;
  CronoConstraintCreator type;
  System.out.print("GETCrono$ ");
}
{
  (
      c = list() {
	boolean isComb=false;

        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw LIST: %s\n",c);
        }
        l = new ArrayList<CronoType>();
        l.add(c);

	Cons newC = (Cons) CronoConstraintCreator.copyCons(c);
	

 	if(CombinatorFunction.isCombinatorFunctionDeepSearch((Cons)c)&&!c.car().equals(new Symbol("define"))) {
		System.out.println("C.CAR: " + c.car());
		
		type = new CronoConstraintCreator(env);
		type.infer(newC);
		type.unify();
		System.out.print("Type: ");
		System.out.println(type.getType(newC.type()));	

		cf = new CombinatorFunction(l,env);

		lastResult = Interpreter.run(cf,0,env);

		System.out.println("Reduce final result: "+lastResult);
		
		if(lastResult instanceof Cons) {
		     System.out.println("result from interpreter: "+Interpreter.eval(lastResult,env));
		}
		else {
			System.out.println("result from interpreter: "+lastResult);
		}

			System.out.print("GETCrono$ ");
	}
	else {
		type = new CronoConstraintCreator(env);
		type.infer(newC);
		
	 	type.unify();
		System.out.print("Type: ");
		System.out.println(type.getType(newC.type()));

		lf = new LambdaFunction(l, env);
		lastResult = Interpreter.run(lf, env);
		env = lf.environment;
		System.out.print("GETCrono$ ");
	}
      }
    | a = atom() {
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw ATOM: %s [ %s ]\n", a,
            a.getClass().getName());
        }
        l = new ArrayList<CronoType>();
        l.add(a);
        lf = new LambdaFunction(l, env);
        lastResult = Interpreter.run(lf, env);
        env = lf.environment;
	System.out.print("GETCrono$ ");
      }
    | <RPAR> { throw new ParseException("Unmatched parenthesis"); }
  )* {
    return lastResult;
  }
}

