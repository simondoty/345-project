/* Generated By:JavaCC: Do not edit this line. Parser.java */
package crono;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

// PROTIP: we can't statically import NIL because javacc gives it special
// meaning in Parser
import crono.AbstractSyntax.*;
import crono.Cons;
import crono.CronoOptions;
import crono.Nil;

public class Parser implements ParserConstants {

  final public Atom atom() throws ParseException {
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      jj_consume_token(NIL);
                    {if (true) return Nil.NIL;}
      break;
    case DOUBLE:
      n = jj_consume_token(DOUBLE);
                   {if (true) return new CronoDouble(n.image);}
      break;
    case STRING:
      n = jj_consume_token(STRING);
                   {if (true) return new CronoString(n.image);}
      break;
    case INTEGER:
      n = jj_consume_token(INTEGER);
                    {if (true) return new CronoNumber(Long.valueOf(n.image));}
      break;
    case SYMBOL:
      n = jj_consume_token(SYMBOL);
                        {if (true) return Symbol.valueOf(n.image);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Atom combinator() throws ParseException {
  Token n;
    n = jj_consume_token(COMBSYMBOL);
                          {if (true) return new CombSymbol(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public Cons list() throws ParseException {
  Atom a;
  Cons c;
  List<CronoType> l = new ArrayList<CronoType>();
    jj_consume_token(LPAR);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
      case LPAR:
      case STRING:
      case DOUBLE:
      case INTEGER:
      case COMBSYMBOL:
      case SYMBOL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        c = list();
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw LIST: %s\u005cn",c);
        }
        l.add(c);
        break;
      case COMBSYMBOL:
        a = combinator();
        l.add(a);
        break;
      case NIL:
      case STRING:
      case DOUBLE:
      case INTEGER:
      case SYMBOL:
        a = atom();
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw ATOM: %s [ %s ]\u005cn", a,
            a.getClass().getName());
        }
        l.add(a);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAR);
    if (l.size() == 0) {
      {if (true) return Nil.NIL;}
    } else {
      l.add(Nil.NIL);
      {if (true) return new Cons(l);}
    }
    throw new Error("Missing return statement in function");
  }

  final public CronoType prog(Environment env) throws ParseException {
  List<CronoType> l;
  LambdaFunction lf;
  CombinatorFunction cf;
  Cons c;
  Atom a;
  CronoType lastResult = null;
  CronoConstraintCreator type;
  System.out.print("GETCrono$ ");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
      case LPAR:
      case RPAR:
      case STRING:
      case DOUBLE:
      case INTEGER:
      case SYMBOL:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        c = list();
        boolean isComb=false;

        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw LIST: %s\u005cn",c);
        }
        l = new ArrayList<CronoType>();
        l.add(c);

        Cons newC = (Cons) CronoConstraintCreator.copyCons(c);


        if(CombinatorFunction.isCombinatorFunctionDeepSearch((Cons)c)&&!c.car().equals(new Symbol("define"))) {
                System.out.println("C.CAR: " + c.car());

                type = new CronoConstraintCreator(env);
                type.infer(newC);
                type.unify();
                System.out.print("Type: ");
                System.out.println(type.getType(newC.type()));

                cf = new CombinatorFunction(l,env);

                lastResult = Interpreter.run(cf,0,env);

                System.out.println("Reduce final result: "+lastResult);

                if(lastResult instanceof Cons) {
                     System.out.println("result from interpreter: "+Interpreter.eval(lastResult,env));
                }
                else {
                        System.out.println("result from interpreter: "+lastResult);
                }

                        System.out.print("GETCrono$ ");
        }
        else {
                type = new CronoConstraintCreator(env);
                type.infer(newC);

                type.unify();
                System.out.print("Type: ");
                System.out.println(type.getType(newC.type()));

                lf = new LambdaFunction(l, env);
                lastResult = Interpreter.run(lf, env);
                env = lf.environment;
                System.out.print("GETCrono$ ");
        }
        break;
      case NIL:
      case STRING:
      case DOUBLE:
      case INTEGER:
      case SYMBOL:
        a = atom();
        if (CronoOptions.PARSER_DPRINT) {
          CronoOptions.dprint("Saw ATOM: %s [ %s ]\u005cn", a,
            a.getClass().getName());
        }
        l = new ArrayList<CronoType>();
        l.add(a);
        lf = new LambdaFunction(l, env);
        lastResult = Interpreter.run(lf, env);
        env = lf.environment;
        System.out.print("GETCrono$ ");
        break;
      case RPAR:
        jj_consume_token(RPAR);
               {if (true) throw new ParseException("Unmatched parenthesis");}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return lastResult;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2e40,0x3ec0,0x3ec0,0x2fc0,0x2fc0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                     }
