/* Generated By:JJTree&JavaCC: Do not edit this line. LispParser.java */
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Scanner;
import java.text.DecimalFormat;


public class LispParser/*@bgen(jjtree)*/implements LispParserTreeConstants, LispParserConstants {/*@bgen(jjtree)*/
  protected JJTLispParserState jjtree = new JJTLispParserState();static boolean bStaticScoping = true;

  public static void main(String args[]) {

    System.out.println("Welcome to Lisp Parser. Type commands or quit.");

    boolean bQuit = false;

    do {
      System.out.print("> ");

      // read a line of input
      String sInput = "";
      Scanner scanIn = new Scanner(System.in);
      sInput = scanIn.nextLine();

      if(sInput.toLowerCase().equals("quit") || sInput.toLowerCase().equals("q")) {
        bQuit = true;

      } else if(sInput.toLowerCase().equals("test") || sInput.toLowerCase().equals("t")) {
        RunTests();

      } else if(sInput.toLowerCase().equals("scoping")) {
        if(bStaticScoping)
          System.out.println("SCOPING = STATIC");
        else
          System.out.println("SCOPING = DYNAMIC");

      } else if(sInput.toLowerCase().equals("set scoping static")) {
        bStaticScoping = true;
        System.out.println("SCOPING = STATIC");

      } else if(sInput.toLowerCase().equals("set scoping dynamic")) {
        bStaticScoping = false;
        System.out.println("SCOPING = DYNAMIC");

      } else {
        RunCommand(sInput);

      }

    } while(!bQuit);

    System.out.println("Parse Completed Successfully.");

  }

  // *************************************************************************
  // try convert all let to lambda
  public static String PreProcess(String sCommand_) {
      InputStream parseStream = new ByteArrayInputStream(sCommand_.getBytes());

      LispParser lp = new LispParser(parseStream);

      String firstParseRes = null;
      try
      {

          firstParseRes = lp.lambdaExpr();
          System.out.println(firstParseRes);
      } catch (Exception e)
      {
          e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
      }

      return firstParseRes;

  }

  // *************************************************************************
  public static void RunCommand(String sCommand_) {
    try {
      String sProcessed = PreProcess(sCommand_);
      // build ast from stream created from the input command
      InputStream in = new ByteArrayInputStream(sProcessed.getBytes());
      LispParser p = new LispParser(in);



      ASTProgram root = p.Program();

      // print the AST
      LispParserVisitor v = new LispParserDumpVisitor();
      root.jjtAccept(v, null);

      System.out.println("----------------------");
      LispParserVisitor e = new LispParserEnvironmentVisitor();
      System.out.println(root.jjtAccept(e, null));

      System.out.println("----------------------");

      // interpret the AST
      if(bStaticScoping) {
        System.out.println("Interpreting with static scoping.");

      } else {
        System.out.println("Interpreting with dynamic scoping.");

      }

      LispParserVisitor i = new LispParserInterpreterVisitor();
      Object result = root.jjtAccept(i, bStaticScoping);

      // *** remove trailing zeroes if a number ***
      if(result instanceof Integer || result instanceof Double) {
        DecimalFormat df = new DecimalFormat("#.###");
        result = df.format(result);

      }

      System.out.println("Interpreted Result: " + result );


    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }

  }

  // **************************************************************************
  public static void RunTests() {
    System.out.println("**************** test 1: 5 **************************");
    RunCommand("5");
    System.out.println("\u005cn\u005cn**************** test 2: (+ 3 4 5) **************************");
    RunCommand("(+ 3 4 5)");
    System.out.println("\u005cn\u005cn**************** test 3: (- 3 1) **************************");
    RunCommand("(- 3 1)");
    System.out.println("\u005cn\u005cn**************** test 4: (* 7 9) **************************");
    RunCommand("(* 7 9)");
    System.out.println("\u005cn\u005cn**************** test 5: (+ 3 4 (* 7 (- 4 2))) **************************");
    RunCommand("(+ 3 4 (* 7 (- 4 2)))");
    System.out.println("\u005cn\u005cn**************** test 6: ((lambda (x) (+ 3 x 4)) 5) **************************");
    RunCommand("((lambda (x) (+ 3 x 4)) 5)");
    System.out.println("\u005cn\u005cn**************** test 7: (lambda (y) (+ 3 (- 4 3))) **************************");
    RunCommand("(lambda (y) (+ 3 (- 4 3)))");
    System.out.println("\u005cn\u005cn**************** test 8: (let ((x 3)) (+ x 3)) **************************");
    RunCommand("(lambda (y) (+ 3 (- 4 3)))");
    System.out.println("\u005cn\u005cn**************** test 8: (let ((x 3)) (* x x x x)) **************************");
    RunCommand("(let ((x 3)) (* x x x x))");
    System.out.println("\u005cn\u005cn**************** test 9: (let ((x 10)) (let ((y 20)) (+ x y)        )) **************************");
    RunCommand("(let ((x 10)) (let ((y 20)) (+ x y)        ))");

    System.out.println("\u005cn\u005cn**************** test 10: (let (( x (+ 5 5) )) (+ x x)) **************************");
    RunCommand("(let (( x (+ 5 5) )) (+ x x))");

    System.out.println("\u005cn\u005cn**************** test 11: (let (( x (+ 5 5) )) (let (( y (- x 3) )) (+ y y) ))   )) **************************");
    RunCommand("(let (( x (+ 5 5) )) (let (( y (- x 3) )) (+ y y) ))");

    System.out.println("\u005cn\u005cn**************** test 12: (let (( x 5 )) (let (( y (- x 3) )) (+ y y) ))   )) **************************");
    RunCommand("(let (( x 5 )) (let (( y (- x 3) )) (+ y y) ))");

    System.out.println("\u005cn\u005cn**************** test 13: (let (( x 5)) (+ x (let ((x 3)) 10)))      )) **************************");
    RunCommand("(let (( x 5)) (+ x (let ((x 3)) 10)))");

    System.out.println("\u005cn\u005cn**************** test 14: (let ((x 5)) (+ x (let (( x 3)) x)))   )) **************************");
    RunCommand("(let ((x 5)) (+ x (let (( x 3)) x)))");

    System.out.println("\u005cn\u005cn**************** test 15: (let (( x 5)) (+ x (let (( y 3 )) x)))    )) **************************");
    RunCommand("(let (( x 5)) (+ x (let (( y 3 )) x)))");

    System.out.println("\u005cn\u005cn**************** test 16: (let (( x 5)) (let (( y x )) y))   )) **************************");
    RunCommand("(let (( x 5)) (let (( y x )) y))");

    System.out.println("\u005cn\u005cn**************** test 17: (let (( x 5 )) (let (( x x )) x)))) **************************");
    RunCommand("(let (( x 5 )) (let (( x x )) x))");

    System.out.println("\u005cn\u005cn**************** test 18: ((let ((f (lambda (x) x))) f) (let ((x 4)) x)) **************************");
    RunCommand("((let ((f (lambda (x) x))) f) (let ((x 4)) x))");

    System.out.println("\u005cn\u005cn**************** test 19: (let (( x 3)) (let ((f (lambda (y) (+ x y)))) (f 4))**************************");
    RunCommand("(let (( x 3)) (let ((f (lambda (y) (+ x y)))) (f 4)))");

    System.out.println("\u005cn\u005cn**************** test 20: (let ((H 0.0001)) (let ((f (lambda (x) (* x x x x)))) (let ((ddx (lambda (x) (/ (- (f (+ x H))(f x)) H)))) (ddx 10)))) ************");
    RunCommand("(let ((H 0.0001)) (let ((f (lambda (x) (* x x x x)))) (let ((ddx (lambda (x) (/ (- (f (+ x H))(f x)) H)))) (ddx 10))))");

    System.out.println("\u005cn\u005cn**************** test 21: (let ((y 5)) (let ((f (lambda (x) (+ x y)))) (let ((y 3)) (f 5)))) ************");
    RunCommand("(let ((y 5)) (let ((f (lambda (x) (+ x y)))) (let ((y 3)) (f 5))))");
  }

// ***************************************************************************
// program entry point
  final public ASTProgram Program() throws ParseException {
                        /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
        Num();
        break;
      case LPAR:
        if (jj_2_1(2)) {
          LambdaExpr();
        } else if (jj_2_2(3)) {
          FunctionExpr();
        } else if (jj_2_3(2)) {
          ArithExpr();
        } else if (jj_2_4(3)) {
          NamedFunctionApp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

// ***************************************************************************
/*
void SExpr():
{ }
{
  (Num() | Identifier() | ArithExpr() | LambdaExpr() | FuncApp() | LetExpr())
  
}
*/

// ***************************************************************************
/*
void Body():
{}
{
LOOKAHEAD(2)
 <LPAR> <LPAR>
        Lambda()
 | Expr()
 | Num()
}

*/
/*
void FunctionApp() :
{}
{
  <LPAR> FunctionExpr() FunctionExpr() <RPAR>
}
*/
// ***************************************************************************
  final public void FunctionExpr() throws ParseException {
 /*@bgen(jjtree) FunctionExpr */
  ASTFunctionExpr jjtn000 = new ASTFunctionExpr(JJTFUNCTIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      LambdaExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
        Num();
        break;
      case IDENTIFIER:
        Identifier();
        break;
      case LPAR:
        if (jj_2_5(2)) {
          LambdaExpr();
        } else if (jj_2_6(3)) {
          FunctionExpr();
        } else if (jj_2_7(2)) {
          ArithExpr();
        } else if (jj_2_8(3)) {
          NamedFunctionApp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// ***************************************************************************
/*
 Need to be able to parse this: ((lambda (d) (d 10)) (lambda (x) (+ x x) ))

*/
  final public void NamedFunctionApp() throws ParseException {
 /*@bgen(jjtree) NamedFunctionApp */
  ASTNamedFunctionApp jjtn000 = new ASTNamedFunctionApp(JJTNAMEDFUNCTIONAPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Identifier();
        break;
      case LPAR:
        FunctionExpr();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
        Num();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_9(3)) {
          FunctionExpr();
        } else if (jj_2_10(2)) {
          ArithExpr();
        } else if (jj_2_11(3)) {
          NamedFunctionApp();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Identifier();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

// ***************************************************************************
  final public void LambdaExpr() throws ParseException {
 /*@bgen(jjtree) LambdaExpr */
  ASTLambdaExpr jjtn000 = new ASTLambdaExpr(JJTLAMBDAEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      jj_consume_token(LAMBDA);
      jj_consume_token(LPAR);
      Identifier();
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
        Num();
        break;
      case IDENTIFIER:
        Identifier();
        break;
      default:
        jj_la1[5] = jj_gen;
        if (jj_2_12(2)) {
          LambdaExpr();
        } else if (jj_2_13(3)) {
          FunctionExpr();
        } else if (jj_2_14(2)) {
          ArithExpr();
        } else if (jj_2_15(3)) {
          NamedFunctionApp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// ***************************************************************************
  final public void ArithExpr() throws ParseException {
                   /*@bgen(jjtree) ArithExpr */
                    ASTArithExpr jjtn000 = new ASTArithExpr(JJTARITHEXPR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t; String s;
    try {
      jj_consume_token(LPAR);
      t = jj_consume_token(OP);
                  s = t.image; jjtn000.setOp(s);
      label_1:
      while (true) {
        if (jj_2_16(3)) {
          NamedFunctionApp();
        } else if (jj_2_17(3)) {
          FunctionExpr();
        } else if (jj_2_18(2)) {
          ArithExpr();
        } else if (jj_2_19(2)) {
          NamedFunctionApp();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOUBLE:
          case INTEGER:
            Num();
            break;
          case IDENTIFIER:
            Identifier();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case INTEGER:
        case IDENTIFIER:
        case LPAR:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

// ***************************************************************************
  final public String Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setIdentifier(t.image); {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// ***************************************************************************
  final public void Num() throws ParseException {
 /*@bgen(jjtree) Num */
  ASTNum jjtn000 = new ASTNum(JJTNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setVal(Integer.parseInt(t.image));
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.setVal(Double.parseDouble(t.image));
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String lambdaExpr() throws ParseException {
  Token n;
  String v;
    if (jj_2_20(2)) {
      jj_consume_token(LPAR);
      jj_consume_token(LET);
      jj_consume_token(LPAR);
      jj_consume_token(LPAR);
                                  String A = "((lambda (" + Identifier() + ") ";
                                  String B = lambdaExpr();
      jj_consume_token(RPAR);
      jj_consume_token(RPAR);
                                  String C = lambdaExpr();
      jj_consume_token(RPAR);
                                  A += C + ") " + B + ")"; {if (true) return A;}
    } else if (jj_2_21(2)) {
      jj_consume_token(LPAR);
      jj_consume_token(LAMBDA);
      jj_consume_token(LPAR);
                              String A = "(lambda (" + Identifier() + ") ";
      jj_consume_token(RPAR);
                              A += lambdaExpr() + ")";
      jj_consume_token(RPAR);
                              {if (true) return A;}
    } else if (jj_2_22(2)) {
      jj_consume_token(LPAR);
      n = jj_consume_token(OP);
                              String B = "(" + n.toString() + " " + lambdaExpr();
      label_2:
      while (true) {
        v = lambdaExpr();
                                    B += " " + v;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case INTEGER:
        case IDENTIFIER:
        case LPAR:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(RPAR);
                              B += ")"; {if (true) return B;}
    } else if (jj_2_23(2)) {
      jj_consume_token(LPAR);
      v = lambdaExpr();
                                    String app = "(" + v;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case INTEGER:
        case IDENTIFIER:
        case LPAR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        v = lambdaExpr();
                                    app += " " + v;
      }
      jj_consume_token(RPAR);
                              app += ")"; {if (true) return app;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        n = jj_consume_token(INTEGER);
                               String B = n.toString(); {if (true) return B;}
        break;
      case DOUBLE:
        n = jj_consume_token(DOUBLE);
                               String D = n.toString(); {if (true) return D;}
        break;
      case IDENTIFIER:
        n = jj_consume_token(IDENTIFIER);
                                  String C = n.toString(); {if (true) return C;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(OP)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(OP)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(LET)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LispParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1600,0x1e00,0x1800,0x600,0x800,0xe00,0xe00,0x1e00,0x600,0x1e00,0x1e00,0xe00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LispParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LispParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LispParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LispParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LispParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LispParser(LispParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LispParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
