/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LispParser.jj */
/*@egen*//*******************************************************************************
 Justin Hust
 Simon Doty
 Ethan Petuchowski

 Group Project 1A
 LispParser - Lisp Parser and Interpreter 
*******************************************************************************/

options {
             
               
                          
}

PARSER_BEGIN(LispParser)

public class LispParser/*@bgen(jjtree)*/implements LispParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTLispParserState jjtree = new JJTLispParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    LispParser p = new LispParser(System.in);
    try {
      ASTProgram root = p.Program();
      LispParserVisitor v = new LispParserDumpVisitor();
      root.jjtAccept(v, null);
      LispParserVisitor i = new LispParserInterpreterVisitor();
      root.jjtAccept(i, null);
      System.out.println("Parse Completed Successfully.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(LispParser)

// ***************************************************************************
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// ***************************************************************************
TOKEN:
{
    < LAMBDA : "LAMBDA" >
  | < LET    : "LET" >
  | < LPAR   : "(" >
  | < RPAR   : ")" >
  | < SEMI   : ";" >
  | < OP: ["+", "-", "*", "/"] >

}

// ***************************************************************************
TOKEN : /* LITERALS */
{
  < INTEGER       :  ["1"-"9"] (["0"-"9"])* >
  | < IDENTIFIER  :  ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                      "*", "_", "=", "{", "}", "[", "]", "|", "\\", ":",
                      ";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
                      "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                      "=", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                      ">", ",", ".", "?", "'", "\""])* >
}

// ***************************************************************************
TOKEN:
{
  < ERROR : ~[] >
}

// ***************************************************************************
// program entry point
ASTProgram Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  Expr() <SEMI>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// ***************************************************************************
void Num(): 
{/*@bgen(jjtree) Num */
  ASTNum jjtn000 = new ASTNum(JJTNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Num */
  try {
/*@egen*/
  t = <INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.setVal(Integer.parseInt(t.image)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

// ***************************************************************************
void Expr(): {/*@bgen(jjtree) Expr */
               ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String s; }
{/*@bgen(jjtree) Expr */
  try {
/*@egen*/
  <LPAR>
	t = <OP>{ s = t.image; jjtn000.setOp(s); }
      (Num() | Expr() )+
   
  <RPAR>
  |  Num()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}
