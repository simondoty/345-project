/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LispParser.jj */
/*@egen*//*******************************************************************************
 Justin Hust
 Simon Doty
 Ethan Petuchowski

 Group Project 1A
 LispParser - Lisp Parser and Interpreter 
*******************************************************************************/
options {
             
               
                          
  STATIC=false;
}

PARSER_BEGIN(LispParser)

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Scanner;


public class LispParser/*@bgen(jjtree)*/implements LispParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTLispParserState jjtree = new JJTLispParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Welcome to Lisp Parser. Type commands or quit.");

    boolean bQuit = false;
    
    do {
      System.out.print("> ");      
      
      // read a line of input
      String sInput = "";
      Scanner scanIn = new Scanner(System.in);
      sInput = scanIn.nextLine();
      
      if(sInput.equals("quit"))
        bQuit = true;

      else if(sInput.equals("test")) {
        RunTests(); 
     
      } else {                    
        RunCommand(sInput + ";");
                   
      }
              
    } while(!bQuit);

    System.out.println("Parse Completed Successfully.");     
      
  }
  
  // *************************************************************************
  public static void RunCommand(String sCommand_) {
    try {
  
      // build ast from stream created from the input command
      InputStream in = new ByteArrayInputStream(sCommand_.getBytes());          
      LispParser p = new LispParser(in);        
      ASTProgram root = p.Program();
      
      // print the AST
      LispParserVisitor v = new LispParserDumpVisitor();
      root.jjtAccept(v, null);
      
      // interpret the AST
      LispParserVisitor i = new LispParserInterpreterVisitor();
      System.out.println(root.jjtAccept(i, null) );    

      
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    
  }
  
  // **************************************************************************
  public static void RunTests() {
    System.out.println("**************** test 1: 5 **************************");
    RunCommand("5");
    System.out.println("**************** test 2: (+ 3 4 5) **************************");    
    RunCommand("(+ 3 4 5)");
    System.out.println("**************** test 3: (- 3 1) **************************");        
    RunCommand("(- 3 1)");
    System.out.println("**************** test 4: (* 7 9) **************************");              
    RunCommand("(* 7 9)");
    System.out.println("**************** test 5: (+ 3 4 (* 7 (- 4 2))) **************************");                  
    RunCommand("(+ 3 4 (* 7 (- 4 2)))");
  
  }
  
}

PARSER_END(LispParser)

// ***************************************************************************
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// ***************************************************************************
TOKEN:
{
    < LAMBDA : "lambda" >
  | < LET    : "LET" >
  | < LPAR   : "(" >
  | < RPAR   : ")" >
  | < SEMI   : ";" >
  | < OP: ["+", "-", "*", "/"] >

}

// ***************************************************************************
TOKEN : /* LITERALS */
{
  < INTEGER       :  ["1"-"9"] (["0"-"9"])* >
  | < IDENTIFIER  :  ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                      "*", "_", "=", "{", "}", "[", "]", "|", "\\", ":",
                      ";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
                      "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                      "=", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                      ">", ",", ".", "?", "'", "\""])* >
}

// ***************************************************************************
TOKEN:
{
  < ERROR : ~[] >
}

// ***************************************************************************
// program entry point
ASTProgram Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  Body() <SEMI>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// ***************************************************************************
void Body():
{/*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Body */
try {
/*@egen*/
LOOKAHEAD(2)
 <LPAR> <LPAR>
        Lambda()
 | Expr()
 | Num()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
// ***************************************************************************
void Lambda() :
{/*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lambda */
        try {
/*@egen*/
    /* Case: Lambda Expression */

        <LAMBDA>
        <LPAR>
    <IDENTIFIER>
        <RPAR>
    Body()
        <RPAR>
    Body()
        <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
// ***************************************************************************
void Expr(): {/*@bgen(jjtree) Expr */
               ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String s; }
{/*@bgen(jjtree) Expr */
  try {
/*@egen*/
  <LPAR>
	t = <OP>{ s = t.image; jjtn000.setOp(s); }
      (Num() | Expr() )+
   
  <RPAR>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

// ***************************************************************************
void Num(): 
{/*@bgen(jjtree) Num */
  ASTNum jjtn000 = new ASTNum(JJTNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Num */
  try {
/*@egen*/
  t = <INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.setVal(Integer.parseInt(t.image)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

