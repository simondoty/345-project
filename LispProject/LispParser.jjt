/*******************************************************************************
 Justin Hust
 Simon Doty
 Ethan Petuchowski

 Group Project 1A
 LispParser - Lisp Parser and Interpreter 
*******************************************************************************/
options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=false;
  STATIC=false;
}

PARSER_BEGIN(LispParser)

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Scanner;


public class LispParser {
  public static void main(String args[]) {
    System.out.println("Welcome to Lisp Parser. Type commands or quit.");

    boolean bQuit = false;
    
    do {
      System.out.print("> ");      
      
      // read a line of input
      String sInput = "";
      Scanner scanIn = new Scanner(System.in);
      sInput = scanIn.nextLine();
      
      if(sInput.equals("quit"))
        bQuit = true;

      else if(sInput.equals("test")) {
        RunTests(); 
     
      } else {                    
        RunCommand(sInput);
                   
      }
              
    } while(!bQuit);

    System.out.println("Parse Completed Successfully.");     
      
  }
  
  // *************************************************************************
  public static void RunCommand(String sCommand_) {
    try {
  
      // build ast from stream created from the input command
      InputStream in = new ByteArrayInputStream(sCommand_.getBytes());          
      LispParser p = new LispParser(in);        
      ASTProgram root = p.Program();
      
      // print the AST
      LispParserVisitor v = new LispParserDumpVisitor();
      root.jjtAccept(v, null);
      
      System.out.println("----------------------");
      
      // interpret the AST
      LispParserVisitor i = new LispParserInterpreterVisitor();
      System.out.println("Interpreted Result: " + root.jjtAccept(i, null) );    

      
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    
  }
  
  // **************************************************************************
  public static void RunTests() {
    System.out.println("**************** test 1: 5 **************************");
    RunCommand("5");
    System.out.println("**************** test 2: (+ 3 4 5) **************************");    
    RunCommand("(+ 3 4 5)");
    System.out.println("**************** test 3: (- 3 1) **************************");        
    RunCommand("(- 3 1)");
    System.out.println("**************** test 4: (* 7 9) **************************");              
    RunCommand("(* 7 9)");
    System.out.println("**************** test 5: (+ 3 4 (* 7 (- 4 2))) **************************");                  
    RunCommand("(+ 3 4 (* 7 (- 4 2)))");
    System.out.println("**************** test 6: (lambda (y) (+ 3 (- 4 3))) **************************");                  
    RunCommand("(lambda (y) (+ 3 (- 4 3)))");

  }
  
}

PARSER_END(LispParser)

// ***************************************************************************
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// ***************************************************************************
TOKEN:
{
    < LAMBDA : "lambda" >
  | < LET    : "let" >
  | < LPAR   : "(" >
  | < RPAR   : ")" >
  | < SEMI   : ";" >
  | < OP: ["+", "-", "*", "/"] >
  | < DIGIT : ["0"-"9"] >
  | < LETTER        :  (["a"-"z", "A"-"Z"])+ >
  | < UNDERSCORE    :  ["_"] >      
  | < SYMBOL        :  ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                        "*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
                        ";", "<", ">", ",", ".", "?", "'", "\""] >

}

// ***************************************************************************
TOKEN : /* LITERALS */
{
  < INTEGER         :  <DIGIT> (<DIGIT>)* >
  | < IDENTIFIER    :  <LETTER> (<DIGIT> | <LETTER> | <UNDERSCORE>)* >  
  
}

// ***************************************************************************
TOKEN:
{
  < ERROR : ~[] >
}

// ***************************************************************************
// program entry point
ASTProgram Program() : {}
{

(  Num()
   | (   LOOKAHEAD(2) LambdaExpr() | LOOKAHEAD(2) FunctionExpr() | ArithExpr())
    
)
      
  { return jjtThis; }
  
}

// ***************************************************************************
/*
void SExpr():
{ }
{
  (Num() | Identifier() | ArithExpr() | LambdaExpr() | FuncApp() | LetExpr())
  
}
*/

// ***************************************************************************
/*
void Body():
{}
{
LOOKAHEAD(2)
 <LPAR> <LPAR>
        Lambda()
 | Expr()
 | Num()
}

*/

// ***************************************************************************
void FunctionExpr() :
{}
{
 <LPAR> LambdaExpr()

(  Num()
  | ( LOOKAHEAD(2) LambdaExpr() | LOOKAHEAD(2) FunctionExpr() | ArithExpr() | Identifier() )

  
)
    <RPAR>
}


// ***************************************************************************
void LambdaExpr() :
{}
{
 <LPAR> 
    <LAMBDA>

    <LPAR>
    Identifier()
    <RPAR>

(  Num()
  | ( LOOKAHEAD(2) LambdaExpr() | LOOKAHEAD(2) FunctionExpr() | ArithExpr() | Identifier() )
 

)

    <RPAR>
}

// ***************************************************************************
void ArithExpr(): { Token t; String s; }
{
<LPAR> 
	t = <OP>{ s = t.image; jjtThis.setOp(s); }
      ( Num() | LOOKAHEAD(2) ArithExpr() | LOOKAHEAD(2) FunctionExpr() | Identifier() )+
   
  <RPAR>

}

// ***************************************************************************
void Identifier(): 
{ Token t; }
{
  t = <LETTER> { jjtThis.setIdentifier(t.image); }

}

// ***************************************************************************
void Num(): 
{ Token t; }
{
  t = <DIGIT> { jjtThis.setVal(Integer.parseInt(t.image)); }

}
