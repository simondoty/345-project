/* Ethan Petuchowski    EID: ecp456     CSID: ethanp    */

PARSER_BEGIN(Parser)

    import java.io.*;
    import java.util.*;

    public class Parser {
        public static void main(String args[]) throws ParseException {
            Parser parser = new Parser (System.in);
            System.out.println(parser.expr());
          //  parser.output();
        }
    }

PARSER_END(Parser)

SKIP:
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <"%" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN:
{
    < LAMBDA : "lambda" >
  | < LET    : "let"    >
}

TOKEN:
{
    < LPAR : "(" >
  | < RPAR : ")" >
  | < NUMBER : (["-"])? (["0"-"9"])+ ("." (["0"-"9"])+)?
              |(["-"])? "." (["0"-"9"])+ >
  | < OP:    ["-", "+", "*", "/"] >
  | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                "*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
                ";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?", "'", "\""])* >


}

TOKEN:
{
  < ERROR : ~[] >
}

/*
Atom atom():
{ Token n; }
{
    n = <NUMBER> { return new CronoNumber(Long.valueOf(n.image)); }
  | n = <SYMBOL>      { return Symbol.valueOf(n.image); }
}

Cons list():
{
  Atom a;
  Cons c;
  List<CronoType> l = new ArrayList<CronoType>();
}
{ <LET> {} }
*/

void output() :
{ Token n; }
{
    <LET>       { System.out.print("let "); output(); }
  | <EOF>       { System.out.print("eof \n"); }
  | <NUMBER>    { System.out.print("num "); output(); }
  | <LPAR>      { System.out.print("lpr "); output(); }
  | <RPAR>      { System.out.print("rpr "); output(); }
  | <SYMBOL>    { System.out.print("sym "); output(); }
  | <LAMBDA>    { System.out.print("lam "); output(); }
  | <OP>        { System.out.print("op "); output(); }
}

/* Not used */
String let() :
{ Token n; }
{
    <LPAR>
    <LPAR>
n = <SYMBOL> { String A = "(" + n.toString() + ") "; String B = expr(); }
{ String let = A + " " + B; return let; }

}

/* Not used */
String lambda() :
{ Token n; }
{
    <LAMBDA>
    <LPAR>
n = <SYMBOL> { String A = n.toString(); }
    <RPAR>
{ return A; }
}

/*
String body() :
{ Token n; }
{
}
*/

String javaLambda() :
{ Token n; String v; }
{ {return "";}
}


String expr() :
{
  Token n; 
  String v;
  SExpr s;
  int i;
}
{
    /* Case: Lambda Expression */
        <LPAR>
        <LPAR>
        <LAMBDA>
        <LPAR>
    v = parameter() { SymbolAtom symAtom = new SymbolAtom(v); }
        <RPAR>
    s = body()
        <RPAR>
    n = <NUMBER> {  NumericAtom numAtom = new NumericAtom(Integer.parseInt(n.toString())); }
        <RPAR>   {
                    FunctionExpr function = new FunctionExpr(symAtom, s, numAtom);
                    System.out.println(function.getBody());
                    return "";
                 }
|   /* Case: just a number */
    n = <NUMBER> {  i = Integer.parseInt(n.toString()); }
| <EOF>

}

SExpr body() :
{ Token n; String v; SExpr s; int i; }
{

    /* Case: body = SYMBOL */
    n = <SYMBOL>{ v = n.toString(); s = new SymbolAtom(v); return s; }

|   n = <NUMBER>{ i = Integer.parseInt(n.toString()); s = new NumericAtom(i); return s; }

|   /* Generalize Case 2: body = something like (+ x (+ x x)) OR (+ x x) */
        <LPAR>
    n = <OP>    { v = n.toString(); Expr e = new Expr(new StringAtom(v)); }

    (s = body()  { e.AddArg(s); })+
    <RPAR> { return e; }
}

/* Not used */
String opVal() :
{Token n; }
{
  n = <SYMBOL> { return n.toString(); }
| n = <NUMBER> { return n.toString(); }
}


/* A Parameter for a Let or Lambda expr must be a <SYMBOL>
        This just converts that to a string */
String parameter() :
{
    Token n;
}
{
    n = <SYMBOL> { return n.toString(); }
}
