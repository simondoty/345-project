/* Generated By: ecp456     CSID&JavaCC: Do not edit this line. Parser.java */
    import java.io.*;
    import java.util.*;

    public class Parser implements ParserConstants {
        public static void main(String args[]) throws ParseException {
            Parser parser = new Parser (System.in);
            System.out.println(parser.expr());
          //  parser.output();
        }

/*
Atom atom():
{ Token n; }
{
    n = <NUMBER> { return new CronoNumber(Long.valueOf(n.image)); }
  | n = <SYMBOL>      { return Symbol.valueOf(n.image); }
}

Cons list():
{
  Atom a;
  Cons c;
  List<CronoType> l = new ArrayList<CronoType>();
}
{ <LET> {} }
*/
  static final public void output() throws ParseException {
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      jj_consume_token(LET);
                  System.out.print("let "); output();
      break;
    case 0:
      jj_consume_token(0);
                  System.out.print("eof \u005cn");
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
                  System.out.print("num "); output();
      break;
    case LPAR:
      jj_consume_token(LPAR);
                  System.out.print("lpr "); output();
      break;
    case RPAR:
      jj_consume_token(RPAR);
                  System.out.print("rpr "); output();
      break;
    case SYMBOL:
      jj_consume_token(SYMBOL);
                  System.out.print("sym "); output();
      break;
    case LAMBDA:
      jj_consume_token(LAMBDA);
                  System.out.print("lam "); output();
      break;
    case OP:
      jj_consume_token(OP);
                  System.out.print("op "); output();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Not used */
  static final public String let() throws ParseException {
  Token n;
    jj_consume_token(LPAR);
    jj_consume_token(LPAR);
    n = jj_consume_token(SYMBOL);
               String A = "(" + n.toString() + ") "; String B = expr();
  String let = A + " " + B; {if (true) return let;}
    throw new Error("Missing return statement in function");
  }

/* Not used */
  static final public String lambda() throws ParseException {
  Token n;
    jj_consume_token(LAMBDA);
    jj_consume_token(LPAR);
    n = jj_consume_token(SYMBOL);
               String A = n.toString();
    jj_consume_token(RPAR);
  {if (true) return A;}
    throw new Error("Missing return statement in function");
  }

/*
String body() :
{ Token n; }
{
}
*/
  static final public String javaLambda() throws ParseException {
  Token n; String v;
   {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  static final public String expr() throws ParseException {
  Token n;
  String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      jj_consume_token(LPAR);
      jj_consume_token(LAMBDA);
      jj_consume_token(LPAR);
      n = jj_consume_token(SYMBOL);
                            System.out.println(n.toString());
                           // SymbolAtom symAtom = new SymbolAtom(n.toString());

      jj_consume_token(RPAR);
      jj_consume_token(SYMBOL);
                            System.out.println(n.toString());
                            SExpr s = new SymbolAtom(n.toString());
                            {if (true) return "";}
      jj_consume_token(RPAR);
      jj_consume_token(SYMBOL);
      jj_consume_token(RPAR);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Not used */
  static final public String opVal() throws ParseException {
 Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      n = jj_consume_token(SYMBOL);
                 {if (true) return n.toString();}
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
                 {if (true) return n.toString();}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* A Parameter for a Let or Lambda expr must be a <SYMBOL>
        This just converts that to a string */
  static final public String parameter() throws ParseException {
    Token n;
    n = jj_consume_token(SYMBOL);
                   {if (true) return n.toString();}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fc1,0x101,0x1400,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
